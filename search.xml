<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>drf源码刨析</title>
      <link href="2021/02/10/drf%E6%BA%90%E7%A0%81%E5%88%A8%E6%9E%90/"/>
      <url>2021/02/10/drf%E6%BA%90%E7%A0%81%E5%88%A8%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="一、开发模式"><a href="#一、开发模式" class="headerlink" title="一、开发模式"></a>一、开发模式</h1><h2 id="1、前后端不分离"><a href="#1、前后端不分离" class="headerlink" title="1、前后端不分离"></a>1、前后端不分离</h2><ul><li>前后端放在一块写</li></ul><h2 id="2、前后端分离"><a href="#2、前后端分离" class="headerlink" title="2、前后端分离"></a>2、前后端分离</h2><ul><li><p>2.1、前端开发</p></li><li><p>2.2、后端开发</p><ul><li>为前端提供API开发</li><li>永远返回HttpResponse<h1 id="二、Django-wsgi"><a href="#二、Django-wsgi" class="headerlink" title="二、Django-wsgi"></a>二、Django-wsgi</h1></li></ul></li></ul><h2 id="1、wsgi"><a href="#1、wsgi" class="headerlink" title="1、wsgi"></a>1、wsgi</h2><table><thead><tr><th>wsgi</th><th>备注</th></tr></thead><tbody><tr><td>wsgi</td><td>协议</td></tr><tr><td>wsgiref</td><td>是实现了wsgi协议的一个模块，一个socket服务端 （django）</td></tr><tr><td>werkzeug</td><td>是实现了wsgi协议的一个模块，一个socket服务端 （flask)</td></tr><tr><td>tornado</td><td>是实现了wsgi协议的一个模块，一个socket服务端 （tornado)</td></tr><tr><td>uwsgi</td><td>是实现了wsgi协议的一个模块，一个socket服务端</td></tr></tbody></table><h1 id="三、Django-FBV、-CBV"><a href="#三、Django-FBV、-CBV" class="headerlink" title="三、Django FBV、 CBV"></a>三、Django FBV、 CBV</h1><h2 id="1、FBV"><a href="#1、FBV" class="headerlink" title="1、FBV"></a>1、FBV</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路由</span></span><br><span class="line">path(<span class="string">&#x27;user/&#x27;</span>, view.users)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 视图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">users</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        user_list = [<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;yiwen&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(json.dumps((user_list))) </span><br></pre></td></tr></table></figure><h2 id="2、CBV"><a href="#2、CBV" class="headerlink" title="2、CBV"></a>2、CBV</h2><ul><li><p>2.1、django中CBV是基于反射实现根据请求方式不同，执行不同的方法</p></li><li><p>2.2、原理：</p><ul><li>url ——&gt; view方法 ——&gt; dispatch方法（反射执行其他：GET/POST/DELETE/PUT/…）</li></ul></li><li><p>2.3、什么是反射</p><ul><li><p>它可以把字符串映射到实例的变量或者实例的方法然后可以去执行调用、修改等操作。它有四个重要的方法：</p><table><thead><tr><th>方法</th><th>备注</th></tr></thead><tbody><tr><td>getattr</td><td>获取指定字符串名称的对象属性</td></tr><tr><td>setattr</td><td>为对象设置一个对象</td></tr><tr><td>hasattr</td><td>判断对象是否有对应的对象（字符串）</td></tr><tr><td>delattr</td><td>删除指定属性</td></tr><tr><td></td><td></td></tr></tbody></table></li><li><p><a href="https://zhuanlan.zhihu.com/p/99150129">反射详解见博客</a></p></li></ul></li><li><p>2.4、代码</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路由</span></span><br><span class="line">path(<span class="string">&#x27;student/&#x27;</span>, views.LoginView.as_view(), name=<span class="string">&#x27;student&#x27;</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 视图</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseView</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">        ret = <span class="built_in">super</span>(BaseView, self).dispatch(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentsView</span>(<span class="params">BaseView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;get&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;post&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;put&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;delete&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="四、django中间件"><a href="#四、django中间件" class="headerlink" title="四、django中间件"></a>四、django中间件</h1></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">适用于所有请求批量做操作</span><br><span class="line">基于角色的权限控制</span><br><span class="line">用户认证</span><br><span class="line">csrf</span><br><span class="line">session</span><br><span class="line">日志</span><br></pre></td></tr></table></figure><h2 id="1、中间件"><a href="#1、中间件" class="headerlink" title="1、中间件"></a>1、中间件</h2><ul><li>process_request</li><li>process_view</li><li>process_response</li><li>process_exception</li><li>process_render_template</li></ul><h2 id="2、django的csrf是如何实现的"><a href="#2、django的csrf是如何实现的" class="headerlink" title="2、django的csrf是如何实现的"></a>2、django的csrf是如何实现的</h2><ul><li>process_view方法<ul><li>去请求体或cookie中获取token进行校验</li></ul></li></ul><h2 id="3、CBV中csrf中使用csrf-exempt装饰器"><a href="#3、CBV中csrf中使用csrf-exempt装饰器" class="headerlink" title="3、CBV中csrf中使用csrf_exempt装饰器"></a>3、CBV中csrf中使用csrf_exempt装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt, csrf_protect</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line"><span class="meta">@method_decorarot(<span class="params">csrf_exempt, name=<span class="string">&#x27;dispatch&#x27;</span></span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentsView</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;get&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;post&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;put&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;delete&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentsView</span>(<span class="params">View</span>):</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @method_decorator(<span class="params">csrf_exempt</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        ret = <span class="built_in">super</span>(BaseView, self).dispatch(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;get&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;post&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;put&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;delete&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="五、RESTFUL规范"><a href="#五、RESTFUL规范" class="headerlink" title="五、RESTFUL规范"></a>五、RESTFUL规范</h1><ul><li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html">RESTful API 设计指南-阮一峰博客</a></li></ul><h2 id="restful-10-规范"><a href="#restful-10-规范" class="headerlink" title="restful 10 规范"></a>restful 10 规范</h2><table><thead><tr><th>规范</th><th align="left">示例</th><th>备注</th></tr></thead><tbody><tr><td>协议</td><td align="left"><a href="https://www.baidu.com/">https://www.baidu.com/</a></td><td>API与用户的通信协议(<strong>通常使用https</strong>)</td></tr><tr><td>域名</td><td align="left"><strong><a href="https://api.example.com/">https://api.example.com</a></strong>或<a href="https://example.org/api/">https://example.org/api/</a></td><td>将API部署在专用域名之下或放在主域名下</td></tr><tr><td>版本</td><td align="left"><a href="https://api.example.com/v1/">https://api.example.com/v1/</a></td><td>将API的版本号放入URL。</td></tr><tr><td>路径</td><td align="left"><a href="https://api.example.com/v1/user">https://api.example.com/v1/user</a></td><td>路径又称”终点”（endpoint），表示API的具体网址</td></tr><tr><td>HTTP动词</td><td align="left">GET/POST/PUT/DELETE</td><td>对于资源的具体操作类型，由HTTP动词表示</td></tr><tr><td>过滤信息</td><td align="left">?limit=10&amp;offset=10&amp;page=2&amp;per_page=100</td><td>API应该提供参数，过滤返回结果</td></tr><tr><td>状态码</td><td align="left">200/201/204/401/404/403/500</td><td>服务器向用户返回的状态码和提示信息</td></tr><tr><td>错误处理</td><td align="left">{error: “Invalid API key” }</td><td>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</td></tr><tr><td>返回结果</td><td align="left">GET /collection：返回资源对象的列表</td><td>针对不同操作，服务器向用户返回的结果遵循规范</td></tr><tr><td>Hypermedia API</td><td align="left">{“link”: {   “rel”:   “collection <a href="https://www.example.com/zoos&quot;">https://www.example.com/zoos&quot;</a>,   “href”:  “<a href="https://api.example.com/zoos&quot;">https://api.example.com/zoos&quot;</a>,   “title”: “List of zoos”,   “type”:  “application/vnd.yourformat+json” }}</td><td>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么</td></tr></tbody></table><h2 id="1、根据method不同做不同的操作"><a href="#1、根据method不同做不同的操作" class="headerlink" title="1、根据method不同做不同的操作"></a>1、根据method不同做不同的操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路由</span></span><br><span class="line">path(<span class="string">&#x27;user/&#x27;</span>, views.UserView.as_view())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 视图</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;获取&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;创建&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;更新&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;删除&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="六、Django-Rest-framework"><a href="#六、Django-Rest-framework" class="headerlink" title="六、Django Rest framework"></a>六、Django Rest framework</h1><h2 id="1、认证"><a href="#1、认证" class="headerlink" title="1、认证"></a>1、认证</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有些api需要认证才能访问</span><br></pre></td></tr></table></figure><ul><li><p><strong>1.1、认证流程原理</strong></p><ul><li><p>①、dispatch()对原生request进行加工</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIView</span>(<span class="params">View</span>):</span></span><br><span class="line"></span><br><span class="line">    permission_classes = api_settings.DEFAULT_PERMISSION_CLASSES</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line">        <span class="comment"># 对原生的request进行加工(丰富了一些功能)</span></span><br><span class="line">        request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">        self.request = request</span><br><span class="line">        self.headers = self.default_response_headers  <span class="comment"># deprecate?</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 认证</span></span><br><span class="line">            self.initial(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 反射</span></span><br><span class="line">            <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">                handler = <span class="built_in">getattr</span>(self, request.method.lower(),</span><br><span class="line">                                  self.http_method_not_allowed)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                handler = self.http_method_not_allowed</span><br><span class="line"></span><br><span class="line">            response = handler(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="comment"># 认证失败抛出异常</span></span><br><span class="line">            response = self.handle_exception(exc)</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize_request</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        parser_context = self.get_parser_context(request)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Request(</span><br><span class="line">            request,</span><br><span class="line">            parsers=self.get_parsers(),</span><br><span class="line">            <span class="comment"># 认证类</span></span><br><span class="line">            authenticators=self.get_authenticators(),</span><br><span class="line">            negotiator=self.get_content_negotiator(),</span><br><span class="line">            parser_context=parser_context</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_authenticators</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> [auth() <span class="keyword">for</span> auth <span class="keyword">in</span> self.authentication_classes]</span><br></pre></td></tr></table></figure></li><li><p>②、initial认证</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initial</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">self.perform_authentication(request)</span><br></pre></td></tr></table></figure></li><li><p>③、调用request.user</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">perform_authentication</span>(<span class="params">self, request</span>):</span></span><br><span class="line">    request.user</span><br></pre></td></tr></table></figure></li><li><p>④、request.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">user</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;_user&#x27;</span>):</span><br><span class="line">            <span class="keyword">with</span> wrap_attributeerrors():</span><br><span class="line">                <span class="comment"># 获取认证对象，进行进一步认证</span></span><br><span class="line">                self._authenticate()</span><br><span class="line">        <span class="keyword">return</span> self._user</span><br></pre></td></tr></table></figure></li><li><p>⑤、循环所有authenticatior对象</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_authenticate</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">for</span> authenticator <span class="keyword">in</span> self.authenticators:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 执行认证类的authenticate方法</span></span><br><span class="line">            <span class="comment"># 1、如果authenticate方法抛出异常：self._not_authenticated()执行</span></span><br><span class="line">            <span class="comment"># 2、成功，返回值必须是元组(request.user, request.auth)</span></span><br><span class="line">            <span class="comment"># 3、返回None</span></span><br><span class="line">            user_auth_tuple = authenticator.authenticate(self)</span><br><span class="line">        <span class="keyword">except</span> exceptions.APIException:</span><br><span class="line">            self._not_authenticated()</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> user_auth_tuple <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                self._authenticator = authenticator</span><br><span class="line">                self.user, self.auth = user_auth_tuple</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    self._not_authenticated()</span><br></pre></td></tr></table></figure></li><li><p>⑥、Authication认证类</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Authication</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">authenticate</span>(<span class="params">self, request</span>):</span></span><br><span class="line">token = request._request.Get.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">token_obj = models.UserToken.objects.<span class="built_in">filter</span>(token=token).first()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> token_obj:</span><br><span class="line"><span class="keyword">raise</span> exceptions.AuthenticationFailed(<span class="string">&#x27;用户认证失败&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> token_obj.user, token_obj</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">authenticate_header</span>(<span class="params">self, request</span>):</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>⑦、执行方法</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="params">APIView</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">...</span>):</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>1.2、认证类配置</strong></p><ul><li><p>①、在CBV中配置</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">authentication_classes = [Xxx, Xzz]</span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">     <span class="keyword">pass</span></span><br><span class="line">     </span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">...</span>):</span></span><br><span class="line">     ...</span><br></pre></td></tr></table></figure></li><li><p>②、全局配置</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setting.py</span></span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line"><span class="string">&quot;DEFAULT_AUTHENTICATION_CLASSES&quot;</span>: [<span class="string">&#x27;类路径&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>1.3、匿名用户</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setting.py</span></span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line"><span class="string">&quot;DEFAULT_AUTHENTICATION_CLASSES&quot;</span>: [<span class="string">&#x27;类路径&#x27;</span>],</span><br><span class="line"><span class="comment"># request.user = None</span></span><br><span class="line"><span class="comment"># request.auth = None</span></span><br><span class="line"><span class="string">&quot;UNAUTHENTICATED_USER&quot;</span>: <span class="literal">None</span>,</span><br><span class="line"><span class="string">&quot;UNAUTHENTICATED_TOKEN&quot;</span>: <span class="literal">None</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>1.4、内置认证类</strong></p><ul><li><p>①、认证基类</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rest_framework.authentication.BaseAuthentication</span><br></pre></td></tr></table></figure><ul><li><p>源码</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseAuthentication</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    All authentication classes should extend BaseAuthentication.</span></span><br><span class="line"><span class="string">    所有认证类都应该继承于BaseAuthentication</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Authenticate the request and return a two-tuple of (user, token).</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&quot;.authenticate() must be overridden.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate_header</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Return a string to be used as the value of the `WWW-Authenticate`</span></span><br><span class="line"><span class="string">        header in a `401 Unauthenticated` response, or `None` if the</span></span><br><span class="line"><span class="string">        authentication scheme should return `403 Permission Denied` responses.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>②、其他认证类</p><ul><li><p>源码</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicAuthentication</span>(<span class="params">BaseAuthentication</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    HTTP Basic authentication against username/password.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionAuthentication</span>(<span class="params">BaseAuthentication</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Use Django&#x27;s session framework for authentication.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TokenAuthentication</span>(<span class="params">BaseAuthentication</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Simple token based authentication.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Clients should authenticate by passing the token key in the &quot;Authorization&quot;</span></span><br><span class="line"><span class="string">    HTTP header, prepended with the string &quot;Token &quot;.  For example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Authorization: Token 401f7ac837da42b97f613d789819ff93537bee6a</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoteUserAuthentication</span>(<span class="params">BaseAuthentication</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    REMOTE_USER authentication.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    To use this, set up your web server to perform authentication, which will</span></span><br><span class="line"><span class="string">    set the REMOTE_USER environment variable. You will need to have</span></span><br><span class="line"><span class="string">    &#x27;django.contrib.auth.backends.RemoteUserBackend in your</span></span><br><span class="line"><span class="string">    AUTHENTICATION_BACKENDS setting</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>1.5、总结</strong></p><ul><li><p>①、使用</p><ul><li><p>创建类：继承<strong>BaseAuthentication</strong></p></li><li><p>实现authenticate方法</p><table><thead><tr><th>返回值</th><th>备注</th></tr></thead><tbody><tr><td>None</td><td>下一认证来执行</td></tr><tr><td>raise exceptions.AuthenticationFailed(‘用户认证失败’)</td><td>rest_framework.exceptions</td></tr><tr><td>(元素一， 元素二)</td><td>元素一赋值给request.user, 元素二赋值给request.auth</td></tr></tbody></table></li></ul></li><li><p>②、源码流程</p><ul><li><p>dispatch</p><ul><li><p>封装request</p><ul><li>获取定义的认证类(全局/局部)，通过列表生成式创建对象</li></ul></li><li><p>inital</p><ul><li>perform_authentication<ul><li>request.user(内部循环…)</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="2、权限"><a href="#2、权限" class="headerlink" title="2、权限"></a>2、权限</h2><pre><code>不同的用户访问接口有不同的权限</code></pre><ul><li><p><strong>2.1、源码流程</strong></p><ul><li><p>```<br>  与认证类源码流程相似</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        - dispatch</span><br><span class="line">            - 封装request</span><br><span class="line">            - inital</span><br><span class="line">                - check_permissions</span><br><span class="line">                    - get_permissions获取定义的权限类（全局&#x2F;局部）,通过列表生成式创建对象</span><br><span class="line">                    - permission.has_permission(判断权限)</span><br><span class="line"></span><br><span class="line">- **2.2、权限内置类**</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;</span><br><span class="line">        rest_framework.permissions.BasePermission</span><br></pre></td></tr></table></figure></li><li><p>①、内置基类</p><ul><li><p>源码</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePermission</span>(<span class="params">metaclass=BasePermissionMetaclass</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A base class from which all permission classes should inherit.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span>(<span class="params">self, request, view</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Return `True` if permission is granted, `False` otherwise.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_object_permission</span>(<span class="params">self, request, view, obj</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Return `True` if permission is granted, `False` otherwise.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>②、其他权限类</p><ul><li><p>源码</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AllowAny</span>(<span class="params">BasePermission</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Allow any access.</span></span><br><span class="line"><span class="string">    This isn&#x27;t strictly required, since you could use an empty</span></span><br><span class="line"><span class="string">    permission_classes list, but it&#x27;s useful because it makes the intention</span></span><br><span class="line"><span class="string">    more explicit.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span>(<span class="params">self, request, view</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsAuthenticated</span>(<span class="params">BasePermission</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Allows access only to authenticated users.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span>(<span class="params">self, request, view</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bool</span>(request.user <span class="keyword">and</span> request.user.is_authenticated)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsAdminUser</span>(<span class="params">BasePermission</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Allows access only to admin users.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span>(<span class="params">self, request, view</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bool</span>(request.user <span class="keyword">and</span> request.user.is_staff)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsAuthenticatedOrReadOnly</span>(<span class="params">BasePermission</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The request is authenticated as a user, or is a read-only request.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span>(<span class="params">self, request, view</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bool</span>(</span><br><span class="line">            request.method <span class="keyword">in</span> SAFE_METHODS <span class="keyword">or</span></span><br><span class="line">            request.user <span class="keyword">and</span></span><br><span class="line">            request.user.is_authenticated</span><br><span class="line">        )</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>2.3、使用</strong></p><ul><li><p>创建类： 继承<strong>BasePermission</strong>(rest_framework.permissions.BasePermission)</p></li><li><p>实现 <strong>has_permission</strong>方法</p><table><thead><tr><th>返回值</th><th>备注</th></tr></thead><tbody><tr><td>True</td><td>有权访问</td></tr><tr><td>False</td><td>无权访问</td></tr><tr><td></td><td></td></tr></tbody></table></li><li><p>全局使用</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line"><span class="string">&quot;DEFAULT_PERMISSION_CLASSES&quot;</span>: [<span class="string">&quot;类路径&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>局部使用</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">permission_classes = [Xxx, Xzz]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">...</span>):</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="3、节流"><a href="#3、节流" class="headerlink" title="3、节流"></a>3、节流</h2><p>控制访问频率</p></li></ul></li><li><p><strong>3.1、源码流程</strong></p><ul><li>dispatch</li><li>inital<ul><li>check_throttles<ul><li>get_throttles</li><li>throttle.allow_request方法</li></ul></li></ul></li></ul></li><li><p><strong>3.2、内置类</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rest_framework.throtting.BaseThrottle</span><br></pre></td></tr></table></figure><ul><li><p>①、基类源码</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseThrottle</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Rate throttling of requests.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_request</span>(<span class="params">self, request, view</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Return `True` if the request should be allowed, `False` otherwise.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;.allow_request() must be overridden&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_ident</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Identify the machine making the request by parsing HTTP_X_FORWARDED_FOR</span></span><br><span class="line"><span class="string">        if present and number of proxies is &gt; 0. If not use all of</span></span><br><span class="line"><span class="string">        HTTP_X_FORWARDED_FOR if it is available, if not use REMOTE_ADDR.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        xff = request.META.get(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>)</span><br><span class="line">        remote_addr = request.META.get(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>)</span><br><span class="line">        num_proxies = api_settings.NUM_PROXIES</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> num_proxies <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> num_proxies == <span class="number">0</span> <span class="keyword">or</span> xff <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> remote_addr</span><br><span class="line">            addrs = xff.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            client_addr = addrs[-<span class="built_in">min</span>(num_proxies, <span class="built_in">len</span>(addrs))]</span><br><span class="line">            <span class="keyword">return</span> client_addr.strip()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(xff.split()) <span class="keyword">if</span> xff <span class="keyword">else</span> remote_addr</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wait</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Optionally, return a recommended number of seconds to wait before</span></span><br><span class="line"><span class="string">        the next request.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleRateThrottle</span>(<span class="params">BaseThrottle</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A simple cache implementation, that only requires `.get_cache_key()`</span></span><br><span class="line"><span class="string">    to be overridden.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The rate (requests / seconds) is set by a `rate` attribute on the View</span></span><br><span class="line"><span class="string">    class.  The attribute is a string of the form &#x27;number_of_requests/period&#x27;.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Period should be one of: (&#x27;s&#x27;, &#x27;sec&#x27;, &#x27;m&#x27;, &#x27;min&#x27;, &#x27;h&#x27;, &#x27;hour&#x27;, &#x27;d&#x27;, &#x27;day&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Previous request information used for throttling is stored in the cache.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cache = default_cache</span><br><span class="line">    timer = time.time</span><br><span class="line">    cache_format = <span class="string">&#x27;throttle_%(scope)s_%(ident)s&#x27;</span></span><br><span class="line">    scope = <span class="literal">None</span></span><br><span class="line">    THROTTLE_RATES = api_settings.DEFAULT_THROTTLE_RATES</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">getattr</span>(self, <span class="string">&#x27;rate&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">            self.rate = self.get_rate()</span><br><span class="line">        self.num_requests, self.duration = self.parse_rate(self.rate)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cache_key</span>(<span class="params">self, request, view</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Should return a unique cache-key which can be used for throttling.</span></span><br><span class="line"><span class="string">        Must be overridden.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        May return `None` if the request should not be throttled.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;.get_cache_key() must be overridden&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_rate</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Determine the string representation of the allowed request rate.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">getattr</span>(self, <span class="string">&#x27;scope&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">            msg = (<span class="string">&quot;You must set either `.scope` or `.rate` for &#x27;%s&#x27; throttle&quot;</span> %</span><br><span class="line">                   self.__class__.__name__)</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(msg)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.THROTTLE_RATES[self.scope]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            msg = <span class="string">&quot;No default throttle rate set for &#x27;%s&#x27; scope&quot;</span> % self.scope</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_rate</span>(<span class="params">self, rate</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Given the request rate string, return a two tuple of:</span></span><br><span class="line"><span class="string">        &lt;allowed number of requests&gt;, &lt;period of time in seconds&gt;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> rate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> (<span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">        num, period = rate.split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        num_requests = <span class="built_in">int</span>(num)</span><br><span class="line">        duration = &#123;<span class="string">&#x27;s&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;m&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">3600</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">86400</span>&#125;[period[<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">return</span> (num_requests, duration)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_request</span>(<span class="params">self, request, view</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Implement the check to see if the request should be throttled.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        On success calls `throttle_success`.</span></span><br><span class="line"><span class="string">        On failure calls `throttle_failure`.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.rate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        self.key = self.get_cache_key(request, view)</span><br><span class="line">        <span class="keyword">if</span> self.key <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        self.history = self.cache.get(self.key, [])</span><br><span class="line">        self.now = self.timer()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Drop any requests from the history which have now passed the</span></span><br><span class="line">        <span class="comment"># throttle duration</span></span><br><span class="line">        <span class="keyword">while</span> self.history <span class="keyword">and</span> self.history[-<span class="number">1</span>] &lt;= self.now - self.duration:</span><br><span class="line">            self.history.pop()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.history) &gt;= self.num_requests:</span><br><span class="line">            <span class="keyword">return</span> self.throttle_failure()</span><br><span class="line">        <span class="keyword">return</span> self.throttle_success()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">throttle_success</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Inserts the current request&#x27;s timestamp along with the key</span></span><br><span class="line"><span class="string">        into the cache.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.history.insert(<span class="number">0</span>, self.now)</span><br><span class="line">        self.cache.<span class="built_in">set</span>(self.key, self.history, self.duration)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">throttle_failure</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Called when a request to the API has failed due to throttling.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wait</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns the recommended next request time in seconds.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.history:</span><br><span class="line">            remaining_duration = self.duration - (self.now - self.history[-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            remaining_duration = self.duration</span><br><span class="line"></span><br><span class="line">        available_requests = self.num_requests - <span class="built_in">len</span>(self.history) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> available_requests &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> remaining_duration / <span class="built_in">float</span>(available_requests)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>3.3、使用</strong></p><ul><li><p>创建类，继承BaseThrottle， 实现allow_reauest、 wait</p></li><li><p>创建类， 继承SimpleRateThrottle， 实现get_cache_key、 scope(配置文件中的key)</p></li><li><p>全局使用</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT_THROTTLE_CLASSES = [<span class="string">&#x27;类路径&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p>局部使用</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">throttle_classes &#x3D; [类]</span><br></pre></td></tr></table></figure><h2 id="4、-版本"><a href="#4、-版本" class="headerlink" title="4、 版本"></a>4、 版本</h2></li></ul></li><li><p><strong>4.1、全局使用</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># url路由配置</span></span><br><span class="line">path(<span class="string">&#x27;meituan/&lt;str:version&gt;/&#x27;</span>, include(<span class="string">&#x27;meituanapp.urls&#x27;</span>)),</span><br><span class="line"></span><br><span class="line"><span class="comment"># settings配置</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 版本类</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_VERSIONING_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.versioning.URLPathVersioning&#x27;</span>,</span><br><span class="line">    <span class="comment"># 默认版本</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_VERSION&#x27;</span>: <span class="string">&#x27;v1&#x27;</span>,</span><br><span class="line">    <span class="comment"># 允许使用的版本</span></span><br><span class="line">    <span class="string">&#x27;ALLOWED_VERSIONS&#x27;</span>: [<span class="string">&#x27;v1&#x27;</span>, <span class="string">&#x27;v2&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>4.2、源码流程</strong></p><ul><li><p>dispatch</p><ul><li><p>initial</p><ul><li><p>determine_versuib</p><table><thead><tr><th>返回值</th><th>request方法</th><th>备注</th></tr></thead><tbody><tr><td>scheme.determine_version(request, *args, **kwargs)</td><td>request.version</td><td>获取当前版本</td></tr><tr><td>scheme</td><td>request.versioning_scheme</td><td>版本控制类对象</td></tr></tbody></table></li></ul></li></ul></li></ul></li><li><p><strong>4.3、request.versioning_scheme.reverse方法</strong>（路由反转）</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 路由</span><br><span class="line">    path(&#39;meituan&#x2F;&lt;str:version&gt;&#x2F;&#39;, include(&#39;serializeapp.urls&#39;, namespace&#x3D;&#39;meituan&#39;)),</span><br><span class="line"># seruakuzeapp.urls.py</span><br><span class="line">path(&#39;good&#x2F;&#39;, views.GoodView.as_view(), name&#x3D;&#39;good&#39;),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 视图</span><br><span class="line">class GoodView(APIView):</span><br><span class="line">    def get(self, request, **kwargs):</span><br><span class="line">        print(request.versioning_scheme.reverse(viewname&#x3D;&#39;meituan:good&#39;, request&#x3D;request))</span><br><span class="line">        # http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;meituan&#x2F;v1&#x2F;good&#x2F;</span><br><span class="line">        print(reverse(&#39;meituan:good&#39;, kwargs&#x3D;&#123;&#39;version&#39;: &#39;v2&#39;&#125;))</span><br><span class="line">        # &#x2F;meituan&#x2F;v2&#x2F;good&#x2F;</span><br><span class="line">        return Response(&#123;&#39;good&#39;: &#39;111&#39;&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>4.4、内置版本控制类</strong></p><ul><li><p>①、基类</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseVersioning</span>:</span></span><br><span class="line">    default_version = api_settings.DEFAULT_VERSION</span><br><span class="line">    allowed_versions = api_settings.ALLOWED_VERSIONS</span><br><span class="line">    version_param = api_settings.VERSION_PARAM</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">determine_version</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        msg = <span class="string">&#x27;&#123;cls&#125;.determine_version() must be implemented.&#x27;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(msg.<span class="built_in">format</span>(</span><br><span class="line">            cls=self.__class__.__name__</span><br><span class="line">        ))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, viewname, args=<span class="literal">None</span>, kwargs=<span class="literal">None</span>, request=<span class="literal">None</span>, <span class="built_in">format</span>=<span class="literal">None</span>, **extra</span>):</span></span><br><span class="line">        <span class="keyword">return</span> _reverse(viewname, args, kwargs, request, <span class="built_in">format</span>, **extra)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_allowed_version</span>(<span class="params">self, version</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.allowed_versions:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> ((version <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> version == self.default_version) <span class="keyword">or</span></span><br><span class="line">                (version <span class="keyword">in</span> self.allowed_versions))</span><br></pre></td></tr></table></figure></li><li><p>②、其他类</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AcceptHeaderVersioning</span>(<span class="params">BaseVersioning</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    GET /something/ HTTP/1.1</span></span><br><span class="line"><span class="string">    Host: example.com</span></span><br><span class="line"><span class="string">    Accept: application/json; version=1.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    invalid_version_message = _(<span class="string">&#x27;Invalid version in &quot;Accept&quot; header.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">determine_version</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        media_type = _MediaType(request.accepted_media_type)</span><br><span class="line">        version = media_type.params.get(self.version_param, self.default_version)</span><br><span class="line">        version = unicode_http_header(version)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_allowed_version(version):</span><br><span class="line">            <span class="keyword">raise</span> exceptions.NotAcceptable(self.invalid_version_message)</span><br><span class="line">        <span class="keyword">return</span> version</span><br><span class="line"></span><br><span class="line">    <span class="comment"># We don&#x27;t need to implement `reverse`, as the versioning is based</span></span><br><span class="line">    <span class="comment"># on the `Accept` header, not on the request URL.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">URLPathVersioning</span>(<span class="params">BaseVersioning</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    To the client this is the same style as `NamespaceVersioning`.</span></span><br><span class="line"><span class="string">    The difference is in the backend - this implementation uses</span></span><br><span class="line"><span class="string">    Django&#x27;s URL keyword arguments to determine the version.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    An example URL conf for two views that accept two different versions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    urlpatterns = [</span></span><br><span class="line"><span class="string">        re_path(r&#x27;^(?P&lt;version&gt;[v1|v2]+)/users/$&#x27;, users_list, name=&#x27;users-list&#x27;),</span></span><br><span class="line"><span class="string">        re_path(r&#x27;^(?P&lt;version&gt;[v1|v2]+)/users/(?P&lt;pk&gt;[0-9]+)/$&#x27;, users_detail, name=&#x27;users-detail&#x27;)</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    GET /1.0/something/ HTTP/1.1</span></span><br><span class="line"><span class="string">    Host: example.com</span></span><br><span class="line"><span class="string">    Accept: application/json</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    invalid_version_message = _(<span class="string">&#x27;Invalid version in URL path.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">determine_version</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        version = kwargs.get(self.version_param, self.default_version)</span><br><span class="line">        <span class="keyword">if</span> version <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            version = self.default_version</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_allowed_version(version):</span><br><span class="line">            <span class="keyword">raise</span> exceptions.NotFound(self.invalid_version_message)</span><br><span class="line">        <span class="keyword">return</span> version</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, viewname, args=<span class="literal">None</span>, kwargs=<span class="literal">None</span>, request=<span class="literal">None</span>, <span class="built_in">format</span>=<span class="literal">None</span>, **extra</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.version <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            kwargs = &#123;&#125; <span class="keyword">if</span> (kwargs <span class="keyword">is</span> <span class="literal">None</span>) <span class="keyword">else</span> kwargs</span><br><span class="line">            kwargs[self.version_param] = request.version</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().reverse(</span><br><span class="line">            viewname, args, kwargs, request, <span class="built_in">format</span>, **extra</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NamespaceVersioning</span>(<span class="params">BaseVersioning</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    To the client this is the same style as `URLPathVersioning`.</span></span><br><span class="line"><span class="string">    The difference is in the backend - this implementation uses</span></span><br><span class="line"><span class="string">    Django&#x27;s URL namespaces to determine the version.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    An example URL conf that is namespaced into two separate versions</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # users/urls.py</span></span><br><span class="line"><span class="string">    urlpatterns = [</span></span><br><span class="line"><span class="string">        path(&#x27;/users/&#x27;, users_list, name=&#x27;users-list&#x27;),</span></span><br><span class="line"><span class="string">        path(&#x27;/users/&lt;int:pk&gt;/&#x27;, users_detail, name=&#x27;users-detail&#x27;)</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # urls.py</span></span><br><span class="line"><span class="string">    urlpatterns = [</span></span><br><span class="line"><span class="string">        path(&#x27;v1/&#x27;, include(&#x27;users.urls&#x27;, namespace=&#x27;v1&#x27;)),</span></span><br><span class="line"><span class="string">        path(&#x27;v2/&#x27;, include(&#x27;users.urls&#x27;, namespace=&#x27;v2&#x27;))</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    GET /1.0/something/ HTTP/1.1</span></span><br><span class="line"><span class="string">    Host: example.com</span></span><br><span class="line"><span class="string">    Accept: application/json</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    invalid_version_message = _(<span class="string">&#x27;Invalid version in URL path. Does not match any version namespace.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">determine_version</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        resolver_match = <span class="built_in">getattr</span>(request, <span class="string">&#x27;resolver_match&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> resolver_match <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> resolver_match.namespace:</span><br><span class="line">            <span class="keyword">return</span> self.default_version</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Allow for possibly nested namespaces.</span></span><br><span class="line">        possible_versions = resolver_match.namespace.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> version <span class="keyword">in</span> possible_versions:</span><br><span class="line">            <span class="keyword">if</span> self.is_allowed_version(version):</span><br><span class="line">                <span class="keyword">return</span> version</span><br><span class="line">        <span class="keyword">raise</span> exceptions.NotFound(self.invalid_version_message)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, viewname, args=<span class="literal">None</span>, kwargs=<span class="literal">None</span>, request=<span class="literal">None</span>, <span class="built_in">format</span>=<span class="literal">None</span>, **extra</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.version <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            viewname = self.get_versioned_viewname(viewname, request)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().reverse(</span><br><span class="line">            viewname, args, kwargs, request, <span class="built_in">format</span>, **extra</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_versioned_viewname</span>(<span class="params">self, viewname, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> request.version + <span class="string">&#x27;:&#x27;</span> + viewname</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HostNameVersioning</span>(<span class="params">BaseVersioning</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    GET /something/ HTTP/1.1</span></span><br><span class="line"><span class="string">    Host: v1.example.com</span></span><br><span class="line"><span class="string">    Accept: application/json</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    hostname_regex = re.<span class="built_in">compile</span>(<span class="string">r&#x27;^([a-zA-Z0-9]+)\.[a-zA-Z0-9]+\.[a-zA-Z0-9]+$&#x27;</span>)</span><br><span class="line">    invalid_version_message = _(<span class="string">&#x27;Invalid version in hostname.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">determine_version</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        hostname, separator, port = request.get_host().partition(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        match = self.hostname_regex.match(hostname)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> match:</span><br><span class="line">            <span class="keyword">return</span> self.default_version</span><br><span class="line">        version = match.group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_allowed_version(version):</span><br><span class="line">            <span class="keyword">raise</span> exceptions.NotFound(self.invalid_version_message)</span><br><span class="line">        <span class="keyword">return</span> version</span><br><span class="line"></span><br><span class="line">    <span class="comment"># We don&#x27;t need to implement `reverse`, as the hostname will already be</span></span><br><span class="line">    <span class="comment"># preserved as part of the REST framework `reverse` implementation.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryParameterVersioning</span>(<span class="params">BaseVersioning</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    GET /something/?version=0.1 HTTP/1.1</span></span><br><span class="line"><span class="string">    Host: example.com</span></span><br><span class="line"><span class="string">    Accept: application/json</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    invalid_version_message = _(<span class="string">&#x27;Invalid version in query parameter.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">determine_version</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        version = request.query_params.get(self.version_param, self.default_version)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_allowed_version(version):</span><br><span class="line">            <span class="keyword">raise</span> exceptions.NotFound(self.invalid_version_message)</span><br><span class="line">        <span class="keyword">return</span> version</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, viewname, args=<span class="literal">None</span>, kwargs=<span class="literal">None</span>, request=<span class="literal">None</span>, <span class="built_in">format</span>=<span class="literal">None</span>, **extra</span>):</span></span><br><span class="line">        url = <span class="built_in">super</span>().reverse(</span><br><span class="line">            viewname, args, kwargs, request, <span class="built_in">format</span>, **extra</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> request.version <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> replace_query_param(url, self.version_param, request.version)</span><br><span class="line">        <span class="keyword">return</span> url</span><br></pre></td></tr></table></figure><h2 id="5、解析器"><a href="#5、解析器" class="headerlink" title="5、解析器"></a>5、解析器</h2></li></ul></li></ul><h2 id="6、序列化"><a href="#6、序列化" class="headerlink" title="6、序列化"></a>6、序列化</h2><h2 id="7、分页"><a href="#7、分页" class="headerlink" title="7、分页"></a>7、分页</h2><h2 id="8、路由"><a href="#8、路由" class="headerlink" title="8、路由"></a>8、路由</h2><h2 id="9、视图"><a href="#9、视图" class="headerlink" title="9、视图"></a>9、视图</h2><h2 id="10、渲染器"><a href="#10、渲染器" class="headerlink" title="10、渲染器"></a>10、渲染器</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DRF源码刨析 - 一文g</title>
      <link href="2021/01/23/DRF%E6%BA%90%E7%A0%81%E5%88%A8%E6%9E%90-%E4%B8%80%E6%96%87g/"/>
      <url>2021/01/23/DRF%E6%BA%90%E7%A0%81%E5%88%A8%E6%9E%90-%E4%B8%80%E6%96%87g/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>一、开发模式 1、前后端不分离 前后端放在一块写 2、前后端分离 2.1、前端开发 2.2、后端开发 为前端提供API开发 永远返回HttpResponse 二、Django-wsgi 1、wsgi wsgi 备注 wsgi 协议 wsgiref 是实现了wsgi协议的一个模块，一个socket服务</p><!-- more --><p>【摘要】 <a href="http://www.cnblogs.com/YiwenGG/p/14304222.html">阅读全文</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>django中使用qiniu作为第三方存储 - 一文g</title>
      <link href="2021/01/17/django%E4%B8%AD%E4%BD%BF%E7%94%A8qiniu%E4%BD%9C%E4%B8%BA%E7%AC%AC%E4%B8%89%E6%96%B9%E5%AD%98%E5%82%A8-%E4%B8%80%E6%96%87g/"/>
      <url>2021/01/17/django%E4%B8%AD%E4%BD%BF%E7%94%A8qiniu%E4%BD%9C%E4%B8%BA%E7%AC%AC%E4%B8%89%E6%96%B9%E5%AD%98%E5%82%A8-%E4%B8%80%E6%96%87g/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>django使用七牛云存储 前言 现在的网站基本上都需要上传文件，那么文件会占用大量的存储空间和服务器流量，由此使用第三方存储服务器很有必要，今天我们就使用七牛云存储作为django项目的文件存储服务器 一、安装 pip install django-qiniu-storage 二、settings</p><!-- more --><p>【摘要】 <a href="http://www.cnblogs.com/YiwenGG/p/14288609.html">阅读全文</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python 测试 - 一文g</title>
      <link href="2021/01/02/python-%E6%B5%8B%E8%AF%95-%E4%B8%80%E6%96%87g/"/>
      <url>2021/01/02/python-%E6%B5%8B%E8%AF%95-%E4%B8%80%E6%96%87g/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>一、基础部分 给定一个字符串aStr，返回使用空格或者’\t’分割后的倒数第二个子串 “hello Bruce \t huan \t\nying kai \n\t xue” 答案 print(aStr.split(None)[-2]) 一个学校，有3个办公室，现在有8位老师等待工位的分配，请编写程序</p><!-- more --><p>【摘要】 <a href="http://www.cnblogs.com/YiwenGG/p/14221769.html">阅读全文</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用django内置邮件模块发送邮件 - 一文g</title>
      <link href="2020/12/31/%E4%BD%BF%E7%94%A8django%E5%86%85%E7%BD%AE%E9%82%AE%E4%BB%B6%E6%A8%A1%E5%9D%97%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6-%E4%B8%80%E6%96%87g/"/>
      <url>2020/12/31/%E4%BD%BF%E7%94%A8django%E5%86%85%E7%BD%AE%E9%82%AE%E4%BB%B6%E6%A8%A1%E5%9D%97%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6-%E4%B8%80%E6%96%87g/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Django内置的邮件模块为 django.core.mail.send_mail 在settings.py中配置邮箱设置 EMAIL_HOST = “smtp.163.com” # 邮箱服务器 EMAIL_PORT = 25 # 端口 EMAIL_HOST_USER = ‘’ # 用户名 EMAI</p><!-- more --><p>【摘要】 <a href="http://www.cnblogs.com/YiwenGG/p/14214921.html">阅读全文</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql多表查询 - 一文g</title>
      <link href="2020/12/28/mysql%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2-%E4%B8%80%E6%96%87g/"/>
      <url>2020/12/28/mysql%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2-%E4%B8%80%E6%96%87g/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>一对一（夫妻之间） 一对多 （父子） 多对多 （明星与粉丝） 内连接 select * form xx as x inner join xxx as c on x.id=c.x_id; 左连接 left join 右连接 right join 笛卡尔积</p><!-- more --><p>【摘要】 <a href="http://www.cnblogs.com/YiwenGG/p/14200530.html">阅读全文</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用vue2和vue-router移植一个博客页面 - 一文g</title>
      <link href="2020/12/26/%E4%BD%BF%E7%94%A8vue2%E5%92%8Cvue-router%E7%A7%BB%E6%A4%8D%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2-%E4%B8%80%E6%96%87g/"/>
      <url>2020/12/26/%E4%BD%BF%E7%94%A8vue2%E5%92%8Cvue-router%E7%A7%BB%E6%A4%8D%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2-%E4%B8%80%E6%96%87g/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>开始 使用vue脚手架创建一个项目 请移步此处————创建vue项目 创建完成之后在public/index.html目录下引入项目中需要的bootstrapCDN</p><!-- more --><p>【摘要】 <a href="http://www.cnblogs.com/YiwenGG/p/14193279.html">阅读全文</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>django中的media配置 - 一文g</title>
      <link href="2020/12/25/django%E4%B8%AD%E7%9A%84media%E9%85%8D%E7%BD%AE-%E4%B8%80%E6%96%87g/"/>
      <url>2020/12/25/django%E4%B8%AD%E7%9A%84media%E9%85%8D%E7%BD%AE-%E4%B8%80%E6%96%87g/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>media django框架中用户上传文件的存放位置 media在django中的配置 在项目根目录下创建media文件夹 在settings.py文件中配置MEDIA_ROOT,MEDIA_URL MEDIA_ROOT = os.path.join(BASE_DIR, ‘media’) MEDIA</p><!-- more --><p>【摘要】 <a href="http://www.cnblogs.com/YiwenGG/p/14190526.html">阅读全文</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自我总结 - 一文g</title>
      <link href="2020/12/25/%E8%87%AA%E6%88%91%E6%80%BB%E7%BB%93-%E4%B8%80%E6%96%87g/"/>
      <url>2020/12/25/%E8%87%AA%E6%88%91%E6%80%BB%E7%BB%93-%E4%B8%80%E6%96%87g/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>技能 熟练程度 备注 python 精通 熟悉python常用的库，如datetime, uuid, requests等 DJANGO 熟悉 熟悉FBV、CBV、GCBV视图, 熟练ORM操作, 了解MVC和MTV设计模式 FLASK 熟悉 熟悉FLASK第三方开源组件：flask-sqlalche</p><!-- more --><p>【摘要】 <a href="http://www.cnblogs.com/YiwenGG/p/14187244.html">阅读全文</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>django DRF - 一文g</title>
      <link href="2020/12/24/django-DRF-%E4%B8%80%E6%96%87g/"/>
      <url>2020/12/24/django-DRF-%E4%B8%80%E6%96%87g/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>DRF (Django Rest Framework) DRF介绍 DRF是在Django框架中实现 Restful API 的一个插件 DRF与DJANGO中JsonResponse相比的好处 可以自动生成API文档，在前后端分离开发的时候进行沟通比较有用 授权验证策略比较完整，包含 OAuth1</p><!-- more --><p>【摘要】 <a href="http://www.cnblogs.com/YiwenGG/p/14185156.html">阅读全文</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>django-xadmin的使用以及xadmin icon 的更新使用 - 一文g</title>
      <link href="2020/12/22/django-xadmin%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8Axadmin-icon-%E7%9A%84%E6%9B%B4%E6%96%B0%E4%BD%BF%E7%94%A8-%E4%B8%80%E6%96%87g/"/>
      <url>2020/12/22/django-xadmin%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8Axadmin-icon-%E7%9A%84%E6%9B%B4%E6%96%B0%E4%BD%BF%E7%94%A8-%E4%B8%80%E6%96%87g/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>开始 在已有django项目的前提下 安装django-xadmin pip install <a href="https://codeload.github.com/sshwsfc/xadmin/zip/django2">https://codeload.github.com/sshwsfc/xadmin/zip/django2</a> 在setting.py进行注册 INSTALLED_APPS = [ ‘xadmin’, ‘cr</p><!-- more --><p>【摘要】 <a href="http://www.cnblogs.com/YiwenGG/p/14171207.html">阅读全文</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
